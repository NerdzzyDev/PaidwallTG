import logging
import re
from datetime import datetime, timedelta

from aiogram import F, Router, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

from app.database.models import get_stats, update_subscription
from config.config import config

router = Router()
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s [%(levelname)s] [Admin] %(message)s", datefmt="%Y-%m-%d %H:%M:%S"
)
logger = logging.getLogger(__name__)


@router.message(Command("a"))
async def admin_stats(message: types.Message):
    logger.info("Received /a command from user_id=%s", message.from_user.id)
    if message.from_user.id != config.admin_id:
        logger.warning("Unauthorized access to /a by user_id=%s", message.from_user.id)
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.")
        return
    logger.info("Admin %s requesting statistics", message.from_user.id)
    try:
        stats = await get_stats(message.bot.pool)
        response = (
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
            f"–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏: {stats['active_subscribers']}\n"
            f"–ë–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏: {stats['non_subscribers']}\n"
            f"–û—Ü–µ–Ω–æ—á–Ω—ã–π –º–µ—Å—è—á–Ω—ã–π –¥–æ—Ö–æ–¥: {stats['estimated_income']}‚ÇΩ"
        )
        logger.info("Sending stats to admin: %s", response)
        await message.answer(response)
    except Exception as e:
        logger.error("Failed to fetch stats for admin %s: %s", message.from_user.id, str(e))
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")


@router.callback_query(lambda c: c.data.startswith("approve_"))
async def approve_subscription(callback: types.CallbackQuery):
    if callback.from_user.id != config.admin_id:
        logger.warning("Unauthorized callback approve by user_id=%s", callback.from_user.id)
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.", show_alert=True)
        return
    user_id = int(callback.data.split("_")[1])
    expires_at = datetime.utcnow() + timedelta(days=30)
    try:
        await update_subscription(callback.bot.pool, user_id, True, expires_at)
        logger.info("Approved subscription for user_id=%s until %s", user_id, expires_at)
        await callback.message.edit_reply_markup(reply_markup=None)  # Remove buttons
        await callback.message.answer(
            f"–ü–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –¥–æ {expires_at.strftime('%d.%m.%Y')}."
        )
        await callback.bot.send_message(
            user_id,
            f"–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –¥–æ {expires_at.strftime('%d.%m.%Y')}!",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª", url=f"https://t.me/{config.channel_id}")]
                ]
            ),
        )
        await callback.answer("–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.")
    except Exception as e:
        logger.error("Failed to approve subscription for user_id=%s: %s", user_id, str(e))
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏.", show_alert=True)


@router.callback_query(lambda c: c.data.startswith("reject_"))
async def reject_subscription(callback: types.CallbackQuery):
    if callback.from_user.id != config.admin_id:
        logger.warning("Unauthorized callback reject by user_id=%s", callback.from_user.id)
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.", show_alert=True)
        return
    user_id = int(callback.data.split("_")[1])
    try:
        logger.info("Rejected subscription for user_id=%s", user_id)
        await callback.message.edit_reply_markup(reply_markup=None)  # Remove buttons
        await callback.message.answer(f"–ü–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
        await callback.bot.send_message(user_id, "–í–∞—à–∞ –æ–ø–ª–∞—Ç–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.")
        await callback.answer("–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
    except Exception as e:
        logger.error("Failed to reject subscription for user_id=%s: %s", user_id, str(e))
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏.", show_alert=True)


@router.message(F.reply_to_message & F.from_user.id == config.admin_id)
async def handle_admin_reply(message: types.Message):
    logger.info("Received reply from admin_id=%s", message.from_user.id)
    if not message.reply_to_message or not message.reply_to_message.caption:
        logger.warning("Admin reply has no valid reply_to_message or caption")
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.")
        return
    caption = message.reply_to_message.caption
    user_id_match = re.search(r"ID: (\d+)", caption)
    if not user_id_match:
        logger.warning("Could not extract user ID from caption: %s", caption)
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è.")
        return
    user_id = int(user_id_match.group(1))
    try:
        await message.bot.send_message(user_id, message.text)
        logger.info("Admin replied to user_id=%s with message: %s", user_id, message.text)
        await message.answer(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}.")
    except Exception as e:
        logger.error("Failed to send reply to user_id=%s: %s", user_id, str(e))
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
